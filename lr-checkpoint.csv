{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 3,
   "id": "f87f5e36",
   "metadata": {},
   "outputs": [],
   "source": [
    "import numpy as np\n",
    "import pandas as pd\n",
    "import matplotlib.pyplot as plt\n",
    "dataset=pd.read_csv('F:\\\\ML EXPERIMENT\\\\houseprices.csv')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "id": "e88909fc",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>area</th>\n",
       "      <th>price</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>2600</td>\n",
       "      <td>55000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>3000</td>\n",
       "      <td>56500</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>3200</td>\n",
       "      <td>64000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>3600</td>\n",
       "      <td>66000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>4000</td>\n",
       "      <td>72500</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>5</th>\n",
       "      <td>4400</td>\n",
       "      <td>74350</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>6</th>\n",
       "      <td>4600</td>\n",
       "      <td>77000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>7</th>\n",
       "      <td>4900</td>\n",
       "      <td>79500</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>8</th>\n",
       "      <td>5200</td>\n",
       "      <td>83500</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "   area  price\n",
       "0  2600  55000\n",
       "1  3000  56500\n",
       "2  3200  64000\n",
       "3  3600  66000\n",
       "4  4000  72500\n",
       "5  4400  74350\n",
       "6  4600  77000\n",
       "7  4900  79500\n",
       "8  5200  83500"
      ]
     },
     "execution_count": 4,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "dataset"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 43,
   "id": "fa9c26d7",
   "metadata": {},
   "outputs": [
    {
     "ename": "KeyError",
     "evalue": "\"None of [Index(['area'], dtype='object')] are in the [columns]\"",
     "output_type": "error",
     "traceback": [
      "\u001b[1;31m---------------------------------------------------------------------------\u001b[0m",
      "\u001b[1;31mKeyError\u001b[0m                                  Traceback (most recent call last)",
      "Input \u001b[1;32mIn [43]\u001b[0m, in \u001b[0;36m<cell line: 1>\u001b[1;34m()\u001b[0m\n\u001b[1;32m----> 1\u001b[0m x\u001b[38;5;241m=\u001b[39m\u001b[43mdataset\u001b[49m\u001b[43m[\u001b[49m\u001b[43m[\u001b[49m\u001b[38;5;124;43m'\u001b[39;49m\u001b[38;5;124;43marea\u001b[39;49m\u001b[38;5;124;43m'\u001b[39;49m\u001b[43m]\u001b[49m\u001b[43m]\u001b[49m\n\u001b[0;32m      2\u001b[0m y\u001b[38;5;241m=\u001b[39mdataset[\u001b[38;5;124m'\u001b[39m\u001b[38;5;124mprice\u001b[39m\u001b[38;5;124m'\u001b[39m]\n\u001b[0;32m      3\u001b[0m plt\u001b[38;5;241m.\u001b[39mscatter(x,y)\n",
      "File \u001b[1;32m~\\anaconda3\\lib\\site-packages\\pandas\\core\\frame.py:3511\u001b[0m, in \u001b[0;36mDataFrame.__getitem__\u001b[1;34m(self, key)\u001b[0m\n\u001b[0;32m   3509\u001b[0m     \u001b[38;5;28;01mif\u001b[39;00m is_iterator(key):\n\u001b[0;32m   3510\u001b[0m         key \u001b[38;5;241m=\u001b[39m \u001b[38;5;28mlist\u001b[39m(key)\n\u001b[1;32m-> 3511\u001b[0m     indexer \u001b[38;5;241m=\u001b[39m \u001b[38;5;28;43mself\u001b[39;49m\u001b[38;5;241;43m.\u001b[39;49m\u001b[43mcolumns\u001b[49m\u001b[38;5;241;43m.\u001b[39;49m\u001b[43m_get_indexer_strict\u001b[49m\u001b[43m(\u001b[49m\u001b[43mkey\u001b[49m\u001b[43m,\u001b[49m\u001b[43m \u001b[49m\u001b[38;5;124;43m\"\u001b[39;49m\u001b[38;5;124;43mcolumns\u001b[39;49m\u001b[38;5;124;43m\"\u001b[39;49m\u001b[43m)\u001b[49m[\u001b[38;5;241m1\u001b[39m]\n\u001b[0;32m   3513\u001b[0m \u001b[38;5;66;03m# take() does not accept boolean indexers\u001b[39;00m\n\u001b[0;32m   3514\u001b[0m \u001b[38;5;28;01mif\u001b[39;00m \u001b[38;5;28mgetattr\u001b[39m(indexer, \u001b[38;5;124m\"\u001b[39m\u001b[38;5;124mdtype\u001b[39m\u001b[38;5;124m\"\u001b[39m, \u001b[38;5;28;01mNone\u001b[39;00m) \u001b[38;5;241m==\u001b[39m \u001b[38;5;28mbool\u001b[39m:\n",
      "File \u001b[1;32m~\\anaconda3\\lib\\site-packages\\pandas\\core\\indexes\\base.py:5782\u001b[0m, in \u001b[0;36mIndex._get_indexer_strict\u001b[1;34m(self, key, axis_name)\u001b[0m\n\u001b[0;32m   5779\u001b[0m \u001b[38;5;28;01melse\u001b[39;00m:\n\u001b[0;32m   5780\u001b[0m     keyarr, indexer, new_indexer \u001b[38;5;241m=\u001b[39m \u001b[38;5;28mself\u001b[39m\u001b[38;5;241m.\u001b[39m_reindex_non_unique(keyarr)\n\u001b[1;32m-> 5782\u001b[0m \u001b[38;5;28;43mself\u001b[39;49m\u001b[38;5;241;43m.\u001b[39;49m\u001b[43m_raise_if_missing\u001b[49m\u001b[43m(\u001b[49m\u001b[43mkeyarr\u001b[49m\u001b[43m,\u001b[49m\u001b[43m \u001b[49m\u001b[43mindexer\u001b[49m\u001b[43m,\u001b[49m\u001b[43m \u001b[49m\u001b[43maxis_name\u001b[49m\u001b[43m)\u001b[49m\n\u001b[0;32m   5784\u001b[0m keyarr \u001b[38;5;241m=\u001b[39m \u001b[38;5;28mself\u001b[39m\u001b[38;5;241m.\u001b[39mtake(indexer)\n\u001b[0;32m   5785\u001b[0m \u001b[38;5;28;01mif\u001b[39;00m \u001b[38;5;28misinstance\u001b[39m(key, Index):\n\u001b[0;32m   5786\u001b[0m     \u001b[38;5;66;03m# GH 42790 - Preserve name from an Index\u001b[39;00m\n",
      "File \u001b[1;32m~\\anaconda3\\lib\\site-packages\\pandas\\core\\indexes\\base.py:5842\u001b[0m, in \u001b[0;36mIndex._raise_if_missing\u001b[1;34m(self, key, indexer, axis_name)\u001b[0m\n\u001b[0;32m   5840\u001b[0m     \u001b[38;5;28;01mif\u001b[39;00m use_interval_msg:\n\u001b[0;32m   5841\u001b[0m         key \u001b[38;5;241m=\u001b[39m \u001b[38;5;28mlist\u001b[39m(key)\n\u001b[1;32m-> 5842\u001b[0m     \u001b[38;5;28;01mraise\u001b[39;00m \u001b[38;5;167;01mKeyError\u001b[39;00m(\u001b[38;5;124mf\u001b[39m\u001b[38;5;124m\"\u001b[39m\u001b[38;5;124mNone of [\u001b[39m\u001b[38;5;132;01m{\u001b[39;00mkey\u001b[38;5;132;01m}\u001b[39;00m\u001b[38;5;124m] are in the [\u001b[39m\u001b[38;5;132;01m{\u001b[39;00maxis_name\u001b[38;5;132;01m}\u001b[39;00m\u001b[38;5;124m]\u001b[39m\u001b[38;5;124m\"\u001b[39m)\n\u001b[0;32m   5844\u001b[0m not_found \u001b[38;5;241m=\u001b[39m \u001b[38;5;28mlist\u001b[39m(ensure_index(key)[missing_mask\u001b[38;5;241m.\u001b[39mnonzero()[\u001b[38;5;241m0\u001b[39m]]\u001b[38;5;241m.\u001b[39munique())\n\u001b[0;32m   5845\u001b[0m \u001b[38;5;28;01mraise\u001b[39;00m \u001b[38;5;167;01mKeyError\u001b[39;00m(\u001b[38;5;124mf\u001b[39m\u001b[38;5;124m\"\u001b[39m\u001b[38;5;132;01m{\u001b[39;00mnot_found\u001b[38;5;132;01m}\u001b[39;00m\u001b[38;5;124m not in index\u001b[39m\u001b[38;5;124m\"\u001b[39m)\n",
      "\u001b[1;31mKeyError\u001b[0m: \"None of [Index(['area'], dtype='object')] are in the [columns]\""
     ]
    }
   ],
   "source": [
    "x=dataset[['area']]\n",
    "y=dataset['price']\n",
    "plt.scatter(x,y)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 44,
   "id": "4ad12231",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "array([15.9477618 , 32.77394723, 74.344523  , 25.84551793, 59.49788879,\n",
       "       38.71260091, 19.90686425, 78.30362545, 69.39564493, 11.98865934])"
      ]
     },
     "execution_count": 44,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "from sklearn.model_selection import train_test_split\n",
    "x_train,x_test,y_train,y_test=train_test_split(x,y,test_size=0.4,random_state=0)\n",
    "from sklearn.linear_model import LinearRegression\n",
    "model=LinearRegression()\n",
    "model.fit(x_train,y_train)\n",
    "y_pred=model.predict(x_test)\n",
    "y_pred"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 10,
   "id": "95e8831e",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "26548.023715415024"
      ]
     },
     "execution_count": 10,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "model.intercept_"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 11,
   "id": "92565777",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "array([10.93675889])"
      ]
     },
     "execution_count": 11,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "model.coef_"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 12,
   "id": "f80f5bc3",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>area</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>7</th>\n",
       "      <td>4900</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>3200</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>3000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>4000</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "   area\n",
       "7  4900\n",
       "2  3200\n",
       "1  3000\n",
       "4  4000"
      ]
     },
     "execution_count": 12,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "x_test"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 14,
   "id": "1d809ddc",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "80138.14227641502"
      ]
     },
     "execution_count": 14,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "10.93675889*4900+26548.023715415024"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 15,
   "id": "9b8985ec",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "2038.9328063241137 4865673.381868194 2205.827142336451\n"
     ]
    }
   ],
   "source": [
    "from sklearn.metrics import mean_absolute_error,mean_squared_error,r2_score\n",
    "mae=mean_absolute_error(y_test,y_pred)\n",
    "mse=mean_squared_error(y_test,y_pred)\n",
    "rmse=np.sqrt(mse)\n",
    "print(mae,mse,rmse)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 16,
   "id": "01a8e3bc",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "0.9352726883309989\n"
     ]
    }
   ],
   "source": [
    "R2=r2_score(y_test,y_pred)\n",
    "print(R2)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 17,
   "id": "2b80bb43",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "[<matplotlib.lines.Line2D at 0x1c51d742550>]"
      ]
     },
     "execution_count": 17,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "plt.scatter(x,y)\n",
    "plt.plot(x_test.area,y_pred)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 18,
   "id": "c4c2f772",
   "metadata": {},
   "outputs": [],
   "source": [
    "import numpy as np\n",
    "import pandas as pd\n",
    "import matplotlib.pyplot as plt\n",
    "dataset=pd.read_csv('F:\\\\ML EXPERIMENT\\\\score.csv')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 19,
   "id": "5ca10bb5",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Hours</th>\n",
       "      <th>Scores</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>2.5</td>\n",
       "      <td>21</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>5.1</td>\n",
       "      <td>47</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>3.2</td>\n",
       "      <td>27</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>8.5</td>\n",
       "      <td>75</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>3.5</td>\n",
       "      <td>30</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>5</th>\n",
       "      <td>1.5</td>\n",
       "      <td>20</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>6</th>\n",
       "      <td>9.2</td>\n",
       "      <td>88</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>7</th>\n",
       "      <td>5.5</td>\n",
       "      <td>60</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>8</th>\n",
       "      <td>8.3</td>\n",
       "      <td>81</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>9</th>\n",
       "      <td>2.7</td>\n",
       "      <td>25</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>10</th>\n",
       "      <td>7.7</td>\n",
       "      <td>85</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>11</th>\n",
       "      <td>5.9</td>\n",
       "      <td>62</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>12</th>\n",
       "      <td>4.5</td>\n",
       "      <td>41</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>13</th>\n",
       "      <td>3.3</td>\n",
       "      <td>42</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>14</th>\n",
       "      <td>1.1</td>\n",
       "      <td>17</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>15</th>\n",
       "      <td>8.9</td>\n",
       "      <td>95</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>16</th>\n",
       "      <td>2.5</td>\n",
       "      <td>30</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>17</th>\n",
       "      <td>1.9</td>\n",
       "      <td>24</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>18</th>\n",
       "      <td>6.1</td>\n",
       "      <td>67</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>19</th>\n",
       "      <td>7.4</td>\n",
       "      <td>69</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>20</th>\n",
       "      <td>2.7</td>\n",
       "      <td>30</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>21</th>\n",
       "      <td>4.8</td>\n",
       "      <td>54</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>22</th>\n",
       "      <td>3.8</td>\n",
       "      <td>35</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>23</th>\n",
       "      <td>6.9</td>\n",
       "      <td>76</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>24</th>\n",
       "      <td>7.8</td>\n",
       "      <td>86</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "    Hours  Scores\n",
       "0     2.5      21\n",
       "1     5.1      47\n",
       "2     3.2      27\n",
       "3     8.5      75\n",
       "4     3.5      30\n",
       "5     1.5      20\n",
       "6     9.2      88\n",
       "7     5.5      60\n",
       "8     8.3      81\n",
       "9     2.7      25\n",
       "10    7.7      85\n",
       "11    5.9      62\n",
       "12    4.5      41\n",
       "13    3.3      42\n",
       "14    1.1      17\n",
       "15    8.9      95\n",
       "16    2.5      30\n",
       "17    1.9      24\n",
       "18    6.1      67\n",
       "19    7.4      69\n",
       "20    2.7      30\n",
       "21    4.8      54\n",
       "22    3.8      35\n",
       "23    6.9      76\n",
       "24    7.8      86"
      ]
     },
     "execution_count": 19,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "dataset"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 21,
   "id": "3804a25e",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "<matplotlib.collections.PathCollection at 0x1c52140d580>"
      ]
     },
     "execution_count": 21,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "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\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "x=dataset[['Hours']]\n",
    "y=dataset['Scores']\n",
    "plt.scatter(x,y)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 22,
   "id": "c8552008",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "array([15.9477618 , 32.77394723, 74.344523  , 25.84551793, 59.49788879,\n",
       "       38.71260091, 19.90686425, 78.30362545, 69.39564493, 11.98865934])"
      ]
     },
     "execution_count": 22,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "from sklearn.model_selection import train_test_split\n",
    "x_train,x_test,y_train,y_test=train_test_split(x,y,test_size=0.4,random_state=0)\n",
    "from sklearn.linear_model import LinearRegression\n",
    "model=LinearRegression()\n",
    "model.fit(x_train,y_train)\n",
    "y_pred=model.predict(x_test)\n",
    "y_pred"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 23,
   "id": "cfe73065",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "1.1011275945189425"
      ]
     },
     "execution_count": 23,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "model.intercept_"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 24,
   "id": "49129edf",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "array([9.89775614])"
      ]
     },
     "execution_count": 24,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "model.coef_"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 25,
   "id": "d70c91a0",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Hours</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>5</th>\n",
       "      <td>1.5</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>3.2</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>19</th>\n",
       "      <td>7.4</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>16</th>\n",
       "      <td>2.5</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>11</th>\n",
       "      <td>5.9</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>22</th>\n",
       "      <td>3.8</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>17</th>\n",
       "      <td>1.9</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>24</th>\n",
       "      <td>7.8</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>23</th>\n",
       "      <td>6.9</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>14</th>\n",
       "      <td>1.1</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "    Hours\n",
       "5     1.5\n",
       "2     3.2\n",
       "19    7.4\n",
       "16    2.5\n",
       "11    5.9\n",
       "22    3.8\n",
       "17    1.9\n",
       "24    7.8\n",
       "23    6.9\n",
       "14    1.1"
      ]
     },
     "execution_count": 25,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "x_test"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 26,
   "id": "c16b5312",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "15.947761804518944"
      ]
     },
     "execution_count": 26,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "9.89775614*1.5+1.1011275945189425"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 27,
   "id": "0de4f279",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "4.894510863410611 26.03456968768225 5.102408224327239\n"
     ]
    }
   ],
   "source": [
    "from sklearn.metrics import mean_absolute_error,mean_squared_error,r2_score\n",
    "mae=mean_absolute_error(y_test,y_pred)\n",
    "mse=mean_squared_error(y_test,y_pred)\n",
    "rmse=np.sqrt(mse)\n",
    "print(mae,mse,rmse)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 28,
   "id": "9a7eaf08",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "0.956640847232559\n"
     ]
    }
   ],
   "source": [
    "R2=r2_score(y_test,y_pred)\n",
    "print(R2)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 41,
   "id": "dbe69067",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "Text(0.5, 0, 'Shivansh 20BCS5687')"
      ]
     },
     "execution_count": 41,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "plt.scatter(x,y)\n",
    "plt.plot(x_test.Hours,y_pred)\n",
    "plt.xlabel(\"Shivansh 20BCS5687\")"
   ]
  },
  {
   "cell_type": "raw",
   "id": "ebab84d5",
   "metadata": {},
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3 (ipykernel)",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.9.12"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
